# Nom du workflow qui apparaîtra dans l'interface de GitHub Actions
name: "Vprofile IAC"

# Définition des événements qui déclencheront le workflow
on:
  # Déclenchement lors d'un push sur les branches spécifiées
  push:
    # Branches sur lesquelles le push déclenche le workflow
    branches:
      - main   # Branche principale
      - stage  # Branche de staging
    # Chemins des fichiers qui déclenchent le workflow
    paths:  
      - terraform/**  # Tout fichier dans le répertoire terraform

  # Déclenchement lors d'une pull request vers la branche main
  pull_request:
    branches:
      - main  # Branche principale
    # Chemins des fichiers qui déclenchent le workflow
    paths:
      - terraform/**  # Tout fichier dans le répertoire terraform (donc si on modifie que le fichier de Worfklow mais pas le dossier Terraform, le WF ne sera pas executé)

# Variables d'environnement accessibles dans tout le workflow
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Récupère la clé d'accès depuis les secrets du dépôt
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Récupère la clé secrète depuis les secrets du dépôt
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}  # Récupère le nom du bucket depuis les secrets du dépôt
  AWS_REGION: us-east-1  # Région AWS où le cluster EKS est déployé
  EKS_CLUSTER: vprofile-eks  # Nom du cluster EKS

# Définition des jobs à exécuter
jobs:
   # Nom du job
   terraform:
     name: "Apply terraform code changes"  # Nom du job affiché dans l'interface
     runs-on: ubuntu-latest  # Environnement d'exécution (Ubuntu)

     # Étapes à exécuter dans ce job
     steps:
       # Étape pour récupérer le code source du dépôt
       - name: Checkout source code 
         uses: actions/checkout@v4  # Utilise l'action de checkout pour accéder au code

       # Étape pour configurer Terraform sur le runner
       - name: Setup Terraform with specified version on the runner
         uses: hashicorp/setup-terraform@v2  # Utilise l'action pour installer Terraform
         with:
           terraform_version: 1.10.5  # Corrigez l'indentation ici

       # Étape pour lister les fichiers dans le répertoire terraform
      # - name: List files
       #  run: ls -la terraform  # Affiche tous les fichiers dans le répertoire terraform

       # Étape pour vérifier la version de Terraform
       - name: Check Terraform version
         run: terraform version  # Affiche la version de Terraform utilisée

       # Étape pour initialiser Terraform
       - name: Terraform init
         id: init  # Identifiant de l'étape pour référence ultérieure
         run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"  # Initialise Terraform avec le backend S3 pour stocker l'état
         working-directory: terraform

       # Étape pour vérifier le formatage du code Terraform
       - name: Terraform format
         id: fmt  # Identifiant de l'étape
         run: |
           terraform fmt -check || echo "Formatting issues found"  
         working-directory: terraform

       # Étape pour valider la configuration Terraform
       - name: Terraform validate
         id: validate  # Identifiant de l'étape
         run: terraform validate  # Valide la configuration pour détecter les erreurs
         working-directory: terraform

       # Étape pour générer un plan d'exécution Terraform
       - name: Terraform plan
         id: plan  # Identifiant de l'étape
         run: terraform plan -no-color -input=false -out planfile  # Génère un plan sans couleur et sans interaction
         working-directory: terraform
         continue-on-error: true  # Permet de continuer même si cette étape échoue

       # Étape pour vérifier le statut du plan Terraform
       - name: Terraform plan status
         if: steps.plan.outcome == 'failure'  # Condition pour exécuter cette étape si le plan a échoué
         run: exit 1  # Force l'échec du job si le plan a échoué

       - name: Terraform Apply 
         id: apple
         if: github.ref == 'refs/heads/main' && github.event_name == 'push' #l'étape ne sera exécutée que si le code est poussé sur la branche principal
         run: terraform apply -auto-approve -input=false -parallelise=1  #permet d'appliquer les changements sans demander de confirmation. Il y'a un bug que les gens rencontrent concernant le fait que les modules EKS sont executé en parallele (donc on limite le nb de ressources qui peuvent être créées ou modifiées en parallèle à 1. Cela peut être utile pour éviter des conflits ou des problèmes de dépendance entre les ressources.)
        
      
       - name: Configure AWS credentials
         uses: aws-actions/configure-aws-credentials@v1 #Utilise une action GitHub préconçue pour configurer les identifiants
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} #ces valeurs sont récupérées à partir des secrets GitHub
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: ${{ env.AWS_REGION }} # Définit la région AWS où se trouve votre cluster EKS

       - name: Get Kube config file #Cette étape met à jour le fichier de configuration kubeconfig, qui permet à kubectl de communiquer avec votre cluster EK (car pr nginx on execute kubectl, et pr executer cette cmd on a besoi du fichier 'kubeconfig"')
         id: getconfig
         if: steps.apple.outcome == 'success' #Cette étape ne s'exécute que si l'étape précédente (celle qui applique la configuration Terraform) a réussi
         run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }} #cette cmd met à jour le fichier de configuration Kubernetes avec les informations du cluster EKS spécifié par son nom

       - name: Install Ingress controller
         if: steps.apple.outcome == 'success' && steps.getconfig.outcome == 'success' #Cette étape ne s'exécute que si les deux étapes précédentes ont réussi, garantissant que vous ne tentez pas d'installer le contrôleur d'ingress sans avoir une configuration valid
         run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml # Cette commande applique la configuration YAML pour déployer l'ingress controller NGINX, qui gère le routage du trafic vers vos services Kubernetes + link pr DL le controlleur 
